"use client"
import React, { useState } from 'react';
import { useSignUp,  } from "@clerk/nextjs"; // Import Clerk
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useRouter } from 'next/navigation';
import AppleLogo from '../icons/AppleLogo';
import GoogleLogo from '../icons/GoogleLogo';
import GradientButton from '../icons/GradientButton';

export function SignupForm({
  className,
  ...props
}: React.ComponentPropsWithoutRef<"div">) {

  const { signUp, isLoaded } = useSignUp();
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  if (!isLoaded) {
    return null;
  }

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError('');

    if (!signUp) {
      console.error("Clerk signup object is not available");
      return;
    }

    try {
      const result = await signUp.create({
        firstName,
        lastName,
        username,
        emailAddress: email,
        password,
      });

      console.log("Signup create result:", result);

      if (result.status === "complete") {
        console.log("Signup complete:", result);
        if (result.createdSessionId) {
          Clerk.setActive({ session: result.createdSessionId });
        }
        router.push('/');
      } else if (result.status === "missing_requirements") {
        if (result.unverifiedFields?.includes("email_address")) { // Check if email needs verification
          const prepareResult = await signUp.prepareEmailAddressVerification();
          console.log("Prepare result:", prepareResult);

          const { startSignUpVerification } = result as any; // Or use optional chaining

          if (typeof startSignUpVerification === 'function') {
            const verificationResult = await startSignUpVerification({ strategy: "email_code" });
            console.log("Verification result:", verificationResult);

            if (verificationResult.status === "needs_verification") {
              if (verificationResult.verificationUrl) {
                window.location.href = verificationResult.verificationUrl;
              } else {
                console.error("Verification URL is missing!");
                setError("Verification failed. Please try again.");
              }
            } else if (verificationResult.status === "complete") {
              if (result.createdSessionId) {
                Clerk.setActive({ session: result.createdSessionId });
              }
              router.push('/');
            } else {
              console.error("Unexpected verification status:", verificationResult.status);
              setError('An error occurred during verification.');
            }
          } else {
            console.error("startSignUpVerification is not a function:", result);
            setError('Verification method not available.');
          }
        } else { // Handle other missing requirements (if any)
          console.error("Missing requirements:", result.missingFields);
          setError("Some required fields are missing.");
        }
      } else {
        console.log("Unexpected signup status:", result.status);
        setError('An unexpected error occurred during signup.');
      }
    } catch (err: any) {
      console.error("Signup error:", err);
      setError(err.errors?.[0]?.longMessage || 'An unexpected error occurred.');
    }
  };


  const handleGoogleSignup = async () => {
    try {
      if (signUp) { // Make sure signUp is available
        const { startOAuthFlow } = signUp;
        await startOAuthFlow({ provider: "google" }); // Or "apple"
      } else {
        console.error("signUp is not available");
        setError("Could not initiate Google signup.");
      }
    } catch (error) {
      console.error("OAuth error:", error);
      setError("An error occurred during Google signup.");
    }
  };

  const handleAppleSignup = async () => {
    try {
      if (signUp) {
        const { startOAuthFlow } = signUp;
        await startOAuthFlow({ provider: "apple" });
      } else {
        console.error("signUp is not available");
        setError("Could not initiate Apple signup.");
      }
    } catch (error) {
      console.error("OAuth error:", error);
      setError("An error occurred during Apple signup.");
    }
  };

  return (
    // Outer container for gradient border
    <div className={cn("flex flex-col gap-6 p-0.5 bg-gradient-to-r from-primary-gradient-start to-primary-gradient-end rounded-lg", className)} {...props}>
      <Card className="w-full sm:w-[400px] bg-[#09090b] border-none rounded-md">
        <CardHeader className="text-center">
          <CardTitle className="text-xl sm:text-2xl text-white">Create Account</CardTitle>
          <CardDescription className="text-sm sm:text-base text-gray-400">
            Sign up with your Apple or Google account
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="flex flex-col gap-4">
             <Button variant="outline" className="w-full text-white flex items-center justify-center">
                <AppleLogo />
                <span className="ml-2">Sign up with Apple</span>
            </Button>
            <Button variant="outline" className="w-full text-white flex items-center justify-center">
                <GoogleLogo />
                <span className="ml-2">Sign up with Google</span>
            </Button>
            </div>

            <div className="relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t after:border-gray-700">
              <span className="relative z-10 bg-[#09090b] px-2 text-gray-400">
                Or continue with
              </span>
            </div>

            <div className="grid gap-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-4">
                <div className="grid gap-1">
                  <Label htmlFor="firstName" className="sr-only">First Name</Label>
                  <Input
                    id="firstName"
                    type="text"
                    placeholder="First name (Optional)"
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                    className="text-sm sm:text-base bg-gray-800 text-gray-300 placeholder-gray-500 border-0"
                  />
                </div>
                <div className="grid gap-1">
                  <Label htmlFor="lastName" className="sr-only">Last Name</Label>
                  <Input
                    id="lastName"
                    type="text"
                    placeholder="Last name (Optional)"
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                    className="text-sm sm:text-base bg-gray-800 text-gray-300 placeholder-gray-500 border-0"
                  />
                </div>
              </div>
              <div className="grid gap-1">
                <Label htmlFor="username" className="sr-only">Username</Label>
                <Input
                  id="username"
                  type="text"
                  placeholder="Username"
                  required
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="text-sm sm:text-base bg-gray-800 text-gray-300 placeholder-gray-500 border-0"
                />
              </div>

              <div className="grid gap-1">
                <Label htmlFor="email" className="sr-only">Email</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="m@example.com"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="text-sm sm:text-base bg-gray-800 text-gray-300 placeholder-gray-500 border-0"
                />
              </div>

              <div className="grid gap-1">
                <Label htmlFor="password" className="sr-only">Password</Label>
                <Input
                  id="password"
                  type="password"
                  required
                  placeholder="Password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="text-sm sm:text-base bg-gray-800 text-gray-300 placeholder-gray-500 border-0"
                />
              </div>
              <GradientButton  type="submit" >
                Create account
            </GradientButton>
            </div>

            <div className="text-center text-sm text-gray-400">
              Already have an account?{" "}
              <a href="/sign-in" className="text-blue-500 hover:text-blue-600 underline underline-offset-4">
                Sign In
              </a>
            </div>
          </form>
        </CardContent>
      </Card>
      {error && <div className="w-full sm:w-[400px] text-red-500 mt-4 text-center">{error}</div>}
    </div>
  );
}